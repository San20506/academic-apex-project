name: Academic Apex CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      # Mock Ollama service for testing
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: --health-cmd "curl -f http://localhost:11434/api/tags" --health-interval 30s --health-timeout 10s --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      env:
        OLLAMA_HOST: http://localhost:11434
        CURATOR_SERVICE_URL: http://localhost:5001
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        fail_ci_if_error: false

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint TypeScript
      run: |
        cd frontend
        npm run type-check
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build production bundle
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/

  # Integration Tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        cd agentforge_academic_apex
        python -m pip install --upgrade pip
        pip install requests pytest
    
    - name: Run smoke tests
      env:
        OLLAMA_HOST: http://mock-ollama:11434
        CURATOR_SERVICE_URL: http://mock-curator:5001
      run: |
        cd agentforge_academic_apex
        python smoke_tests.py || echo "Smoke tests skipped due to missing services"

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: academic-apex/backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build curator image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.curator
        push: false
        tags: academic-apex/curator:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: academic-apex/frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose
      run: |
        cp .env.example .env
        docker-compose -f docker-compose.yml config

  # Release Build (only on main branch)
  release:
    runs-on: ubuntu-latest
    needs: [integration-test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate release version
      id: version
      run: |
        echo "version=v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Create Release ZIP
      run: |
        # Create final deliverable zip
        mkdir -p release
        
        # Copy core files
        cp -r backend release/
        cp -r frontend release/
        cp -r agentforge_academic_apex release/
        cp docker-compose.yml release/
        cp README.md release/
        cp TODO.md release/
        cp LICENSE release/ 2>/dev/null || echo "MIT License" > release/LICENSE
        
        # Create zip
        cd release
        zip -r "../academic_apex_final.zip" .
        cd ..
        
        # Output absolute path
        echo "Final deliverable location: $(pwd)/academic_apex_final.zip"
    
    - name: Upload Release Artifact
      uses: actions/upload-artifact@v3
      with:
        name: academic-apex-release-${{ steps.version.outputs.version }}
        path: academic_apex_final.zip
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Academic Apex Strategist ${{ steps.version.outputs.version }}
        body: |
          ## ðŸš€ Academic Apex Strategist Release
          
          ### Features
          - âœ… FastAPI backend with async support
          - âœ… React TypeScript frontend
          - âœ… Local AI integration via Ollama
          - âœ… Curator service for prompt optimization
          - âœ… Obsidian vault integration
          - âœ… Docker containerization
          - âœ… Comprehensive documentation
          
          ### Installation
          1. Download and extract the release zip
          2. Follow the setup instructions in README.md
          3. Ensure Ollama is installed and running
          
          ### System Requirements
          - Python 3.11+
          - Node.js 18+
          - 8GB RAM minimum (16GB recommended)
          - Ollama with preferred models
          
          Full documentation: https://github.com/academic-apex/academic-apex-project/blob/main/README.md
        files: |
          academic_apex_final.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
